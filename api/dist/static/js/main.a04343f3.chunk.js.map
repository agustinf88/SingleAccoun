{"version":3,"sources":["reducers/account.js","reducers/index.js","components/Movement/index.js","containers/Movements/index.js","containers/Snackbar/index.js","containers/Balance/index.js","containers/Form/index.js","containers/Page/index.js","services/index.js","actions/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","name","balance","movements","date","Date","value","snackbar","open","description","accountReducer","state","action","type","payload","combineReducers","account","Movement","key","classnameValue","classnames","positive","negative","useState","setOpen","handleClick","Fragment","className","onClick","Typography","Collapse","in","timeout","unmountOnExit","Movements","props","useSelector","List","map","movement","i","Snackbar","dispatch","useDispatch","handleClose","onClose","autoHideDuration","SnackbarContent","message","style","backgroundColor","IconButton","arial-babel","Balance","Form","setValue","TextField","id","label","onChange","e","target","InputLabelProps","shrink","Button","variant","color","preventDefault","Page","useEffect","AppBar","postMovement","a","async","fetch","method","headers","body","JSON","stringify","Number","then","r","status","json","Promise","reject","fetchAccountAction","action$","pipe","filter","mergeMap","res","catch","err","console","error","data","addMovementAction","addMovementSuccessAction","observableMiddleware","createEpicMiddleware","store","createStore","reducers","applyMiddleware","run","runActions","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iNAAMA,EAAe,CACnBC,KAAM,GACNC,QAAS,EACTC,UAAW,CAAC,CAAEC,KAAMC,OAAQC,MAAO,KACnCC,SAAU,CACRC,MAAM,EACNC,YAAa,KA2CFC,EAvCQ,WAAmC,IAAlCC,EAAiC,uDAAzBX,EAAcY,EAAW,uCACvD,OAAQA,EAAOC,MACb,IAAK,uBACH,OAAO,eACFF,EADL,CAEER,UAAU,CAAD,eAAQS,EAAOE,UAAf,mBAA6BH,EAAMR,cAGhD,IAAK,wBACH,OAAO,eACFQ,EADL,CAEEV,KAAMW,EAAOE,QAAQb,KACrBC,QAASU,EAAOE,QAAQZ,QACxBC,UAAWS,EAAOE,QAAQX,YAG9B,IAAK,qBACH,OAAO,eACFQ,EADL,CAEEJ,SAAU,CAAEC,MAAM,EAAMC,YAAaG,EAAOE,WAGhD,IAAK,iBACH,OAAO,eACFH,EADL,CAEEJ,SAAU,CAAEC,MAAM,EAAOC,YAAa,MAG1C,IAAK,sBACH,OAAO,eACFE,EADL,CAEET,QAASU,EAAOE,UAGpB,QACE,OAAOH,ICzCEI,cAAgB,CAC7BC,Y,6DCmDaC,G,MAjDE,SAAC,GAA0B,IAAxBb,EAAuB,EAAvBA,KAAME,EAAiB,EAAjBA,MAAOY,EAAU,EAAVA,IACzBC,EAAiBC,IACrB,iBACA,CAAEC,SAAUf,GAAS,GACrB,CAAEgB,SAAUhB,EAAQ,IAJmB,EAMjBiB,oBAAS,GANQ,mBAMlCf,EANkC,KAM5BgB,EAN4B,KAQnCC,EAAc,WAClBD,GAAShB,IAEX,OACE,kBAAC,IAAMkB,SAAP,KACE,yBAAKC,UAAU,WAAWT,IAAKA,EAAKU,QAASH,GAC3C,kBAACI,EAAA,EAAD,KAAazB,GACb,yBAAKuB,UAAWR,GACd,kBAACU,EAAA,EAAD,UACA,kBAACA,EAAA,EAAD,KAAavB,KAGjB,kBAACwB,EAAA,EAAD,CACEC,GAAIvB,EACJwB,QAAQ,OACRC,eAAa,EACbL,QAASH,EACTE,UAAU,qBAEV,yBAAKA,UAAU,kBACb,kBAACE,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,KAAazB,IAEf,yBAAKuB,UAAU,oBACb,kBAACE,EAAA,EAAD,eACA,yBAAKF,UAAWR,GACd,kBAACU,EAAA,EAAD,UACA,kBAACA,EAAA,EAAD,KAAavB,SCvBV4B,EAZG,SAAAC,GAChB,IAAMhC,EAAYiC,aAAY,SAAAzB,GAAK,OAAIA,EAAMK,QAAQb,aAGrD,OACE,kBAACkC,EAAA,EAAD,KACGlC,GACCA,EAAUmC,KAAI,SAACC,EAAUC,GAAX,OAAiB,kBAAC,EAAD,iBAAcD,EAAd,CAAwBrB,IAAKsB,U,4CCcrDC,EApBE,SAAAN,GACf,IAAMO,EAAWC,cADO,EAEMP,aAAY,SAAAzB,GAAK,OAAIA,EAAMK,QAAQT,YAAzDC,EAFgB,EAEhBA,KAAMC,EAFU,EAEVA,YACRmC,EAAc,kBAAMF,EAAS,CAAE7B,KAAM,oBAE3C,OACE,kBAAC,IAAD,CAAkBL,KAAMA,EAAMqC,QAASD,EAAaE,iBAAkB,KACpE,kBAACC,EAAA,EAAD,CACEC,QAASvC,EACTwC,MAAO,CAAEC,gBAAiB,OAC1BtC,OAAQ,CACN,kBAACuC,EAAA,EAAD,CAAYjC,IAAI,QAAQkC,cAAY,QAAQxB,QAASgB,GACnD,kBAAC,IAAD,YCJGS,G,MAXC,SAAAlB,GACd,IAAMjC,EAAUkC,aAAY,SAAAzB,GAAK,OAAIA,EAAMK,QAAQd,WAEnD,OACE,yBAAKyB,UAAW,WACd,kBAACE,EAAA,EAAD,0BAA2B3B,O,0BCgClBoD,G,OAnCF,SAAAnB,GAAU,IAAD,EACMZ,mBAAS,GADf,mBACbjB,EADa,KACNiD,EADM,KAEdb,EAAWC,cASjB,OACE,0BAAMhB,UAAU,QACd,kBAAC6B,EAAA,EAAD,CACEC,GAAG,kBACHC,MAAM,UACN7C,KAAK,SACLP,MAAOA,EACPqD,SATe,SAAAC,GAAC,OAAIL,EAASK,EAAEC,OAAOvD,QAUtCwD,gBAAiB,CACfC,QAAQ,KAGZ,kBAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNrD,KAAK,SACLe,QAxBe,SAAAgC,GACnBA,EAAEO,iBACFzB,EAAS,CAAE7B,KAAM,eAAgBC,QAAS,CAAER,MAAOA,KACnDiD,EAAS,MAiBP,UCSSa,EA5BF,SAAAjC,GACX,IAAMO,EAAWC,cAEjB0B,qBAAU,WACR3B,EAAS,CAAE7B,KAAM,oBAChB,CAACsB,IAEJ,IAAMlC,EAAOmC,aAAY,SAAAzB,GAAK,OAAIA,EAAMK,QAAQf,QAEhD,OACE,kBAAC,IAAMyB,SAAP,KACE,kBAAC4C,EAAA,EAAD,KACE,kBAACzC,EAAA,EAAD,KAAa5B,IAEf,yBAAK0B,UAAU,QACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,uBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QAGJ,kBAAC,EAAD,Q,mCC7BA4C,EAAe,SAAMjE,GAAN,SAAAkE,EAAAC,OAAA,yEACnBC,MAAM,yCAA0C,CAC9CC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEzE,MAAO0E,OAAO1E,OACpC2E,MAAK,SAAAC,GACN,OAAiB,MAAbA,EAAEC,OACGD,EAAEE,OAGM,MAAbF,EAAEC,OACGE,QAAQC,OAAO,2BADxB,MAZiB,sCCFfC,EAAqB,SAAAC,GAAO,OAChCA,EAAQC,KACNC,aAAO,SAAA9E,GAAM,MAAoB,kBAAhBA,EAAOC,QACxB8E,aAAS,SAAM/E,GAAN,eAAA4D,EAAAC,OAAA,kEAAAD,EAAA,MDLXE,MAAM,iCACHO,MAAK,SAAAW,GAAG,OAAIA,EAAIR,UAChBS,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,OCGnB,cACDG,EADC,yBAEA,CAAEpF,KAAM,wBAAyBC,QAASmF,IAF1C,0CAMPC,EAAoB,SAAAV,GAAO,OAC/BA,EAAQC,KACNC,aAAO,SAAA9E,GAAM,MAAoB,iBAAhBA,EAAOC,QACxB8E,aAAS,SAAM/E,GAAN,iBAAA4D,EAAAC,OAAA,gEAEGnE,EAAUM,EAAOE,QAAjBR,MAFH,WAAAkE,EAAA,MAGcD,EAAajE,IAH3B,cAGC2F,EAHD,yBAIE,CAAEpF,KAAM,uBAAwBC,QAASmF,IAJ3C,yDAME,CAAEpF,KAAM,qBAAsBC,QAAS,uBANzC,+FAaPqF,EAA2B,SAAAX,GAAO,OACtCA,EAAQC,KACNC,aAAO,SAAA9E,GAAM,MAAoB,yBAAhBA,EAAOC,QACxB8E,aAAS,SAAM/E,GAAN,eAAA4D,EAAAC,OAAA,2EAAAD,EAAA,MDTQ,EAAAA,EAAAC,OAAA,yEACnBC,MAAM,yCACHO,MAAK,SAAAC,GAAC,OAAIA,EAAEE,UACZS,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,OAHX,sCCSR,cAECG,EAFD,yBAGE,CAAEpF,KAAM,sBAAuBC,QAASmF,EAAK/F,UAH/C,gCAKL6F,QAAQC,MAAR,MALK,6D,SCpBPI,EAAuBC,cAEvBC,EAAQC,YAAYC,EAAUC,YAAgBL,KD4BrC,SAAAA,GACbA,EAAqBM,IAAInB,GACzBa,EAAqBM,IAAIR,GACzBE,EAAqBM,IAAIP,GC7B3BQ,CAAWP,GAGX,IAYeQ,EAZH,WACV,OACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,yBAAK3E,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,UCXUkF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,iB","file":"static/js/main.a04343f3.chunk.js","sourcesContent":["const initialState = {\n  name: \"\",\n  balance: 0,\n  movements: [{ date: Date(), value: 10 }],\n  snackbar: {\n    open: false,\n    description: \"\"\n  }\n};\n\nconst accountReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"ADD_MOVEMENT_SUCCESS\":\n      return {\n        ...state,\n        movements: [{ ...action.payload }, ...state.movements]\n      };\n\n    case \"FETCH_ACCOUNT_SUCCESS\":\n      return {\n        ...state,\n        name: action.payload.name,\n        balance: action.payload.balance,\n        movements: action.payload.movements\n      };\n\n    case \"FORBIDDEN_MOVEMENT\":\n      return {\n        ...state,\n        snackbar: { open: true, description: action.payload }\n      };\n\n    case \"CLOSE_SNACKBAR\":\n      return {\n        ...state,\n        snackbar: { open: false, description: \"\" }\n      };\n\n    case \"GET_BALANCE_SUCCESS\":\n      return {\n        ...state,\n        balance: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default accountReducer;\n","import { combineReducers } from \"redux\";\n\nimport account from \"./account\";\n\nexport default combineReducers({\n  account\n});\n","import React, { useState } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport classnames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport \"./movement.css\";\n\nconst Movement = ({ date, value, key }) => {\n  const classnameValue = classnames(\n    \"movement-value\",\n    { positive: value >= 0 },\n    { negative: value < 0 }\n  );\n  const [open, setOpen] = useState(false);\n\n  const handleClick = () => {\n    setOpen(!open);\n  };\n  return (\n    <React.Fragment>\n      <div className=\"movement\" key={key} onClick={handleClick}>\n        <Typography>{date}</Typography>\n        <div className={classnameValue}>\n          <Typography>$</Typography>\n          <Typography>{value}</Typography>\n        </div>\n      </div>\n      <Collapse\n        in={open}\n        timeout=\"auto\"\n        unmountOnExit\n        onClick={handleClick}\n        className=\"movement__details\"\n      >\n        <div className=\"movement__date\">\n          <Typography>Date</Typography>\n          <Typography>{date}</Typography>\n        </div>\n        <div className=\"movement__amount\">\n          <Typography>Amount</Typography>\n          <div className={classnameValue}>\n            <Typography>$</Typography>\n            <Typography>{value}</Typography>\n          </div>\n        </div>\n      </Collapse>\n    </React.Fragment>\n  );\n};\n\nMovement.propTypes = {\n  date: PropTypes.string,\n  value: PropTypes.number,\n  key: PropTypes.number\n};\n\nexport default Movement;\n","import React from \"react\";\nimport List from \"@material-ui/core/List\";\n\nimport Movement from \"../../components/Movement\";\n\nimport { useSelector } from \"react-redux\";\n\nconst Movements = props => {\n  const movements = useSelector(state => state.account.movements);\n  \n\n  return (\n    <List>\n      {movements &&\n        movements.map((movement, i) => <Movement {...movement} key={i} />)}\n    </List>\n  );\n};\n\nexport default Movements;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nimport SnackbarMaterial from \"@material-ui/core/Snackbar\";\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\n\nconst Snackbar = props => {\n  const dispatch = useDispatch();\n  const { open, description } = useSelector(state => state.account.snackbar);\n  const handleClose = () => dispatch({ type: \"CLOSE_SNACKBAR\" });\n\n  return (\n    <SnackbarMaterial open={open} onClose={handleClose} autoHideDuration={6000}>\n      <SnackbarContent\n        message={description}\n        style={{ backgroundColor: \"red\" }}\n        action={[\n          <IconButton key=\"close\" arial-babel=\"close\" onClick={handleClose}>\n            <CloseIcon />\n          </IconButton>\n        ]}\n      />\n    </SnackbarMaterial>\n  );\n};\n\nexport default Snackbar;\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useSelector } from \"react-redux\";\nimport \"./balance.css\";\n\nconst Balance = props => {\n  const balance = useSelector(state => state.account.balance);\n\n  return (\n    <div className={\"balance\"}>\n      <Typography>{`Balance: $ ${balance}`}</Typography>\n    </div>\n  );\n};\n\n\nexport default Balance;\n","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./form.css\";\n\nimport { useDispatch } from \"react-redux\";\n\nconst Form = props => {\n  const [value, setValue] = useState(0);\n  const dispatch = useDispatch();\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch({ type: \"ADD_MOVEMENT\", payload: { value: value } });\n    setValue(\"\");\n  };\n\n  const handleChange = e => setValue(e.target.value);\n\n  return (\n    <form className=\"form\">\n      <TextField\n        id=\"standard-number\"\n        label=\"Ammount\"\n        type=\"number\"\n        value={value}\n        onChange={handleChange}\n        InputLabelProps={{\n          shrink: true\n        }}\n      />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"submit\"\n        onClick={handleSubmit}\n      >\n        Add\n      </Button>\n    </form>\n  );\n};\n\nexport default Form;\n","import React, { useEffect } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Movements from \"../Movements\";\nimport Snackbar from \"../Snackbar\";\nimport Balance from \"../Balance\";\nimport \"./page.css\";\n\nimport Form from \"../Form\";\n\nconst Page = props => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch({ type: \"FETCH_ACCOUNT\" });\n  }, [props]);\n\n  const name = useSelector(state => state.account.name);\n\n  return (\n    <React.Fragment>\n      <AppBar>\n        <Typography>{name}</Typography>\n      </AppBar>\n      <div className=\"body\">\n        <div className=\"form-container\">\n          <Form />\n        </div>\n        <div className=\"movements-container\">\n          <Balance />\n          <Movements />\n        </div>\n      </div>\n      <Snackbar />\n    </React.Fragment>\n  );\n};\n\nexport default Page;\n","const fetchAccount = () =>\n  fetch(\"http://localhost:8080/account\")\n    .then(res => res.json())\n    .catch(err => console.error(err));\n\nconst postMovement = async value =>\n  fetch(\"http://localhost:8080/account/movement\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ value: Number(value) })\n  }).then(r => {\n    if (r.status === 200) {\n      return r.json();\n    }\n\n    if (r.status === 403) {\n      return Promise.reject(\"Can't add movement\");\n    }\n  });\n\nconst fetchBalance = async () =>\n  fetch(\"http://localhost:8080/account/balance\")\n    .then(r => r.json())\n    .catch(err => console.error(err));\n\n    \nexport { fetchAccount, postMovement, fetchBalance };\n","import { filter, mergeMap } from \"rxjs/operators\";\nimport { fetchAccount, postMovement, fetchBalance } from \"../services\";\n\nconst fetchAccountAction = action$ =>\n  action$.pipe(\n    filter(action => action.type === \"FETCH_ACCOUNT\"),\n    mergeMap(async action => {\n      const data = await fetchAccount();\n      return { type: \"FETCH_ACCOUNT_SUCCESS\", payload: data };\n    })\n  );\n\nconst addMovementAction = action$ =>\n  action$.pipe(\n    filter(action => action.type === \"ADD_MOVEMENT\"),\n    mergeMap(async action => {\n      try {\n        const { value } = action.payload;\n        const data = await postMovement(value);\n        return { type: \"ADD_MOVEMENT_SUCCESS\", payload: data };\n      } catch (error) {\n        return { type: \"FORBIDDEN_MOVEMENT\", payload: \"Can't add movement\" };\n      }\n\n      return;\n    })\n  );\n\nconst addMovementSuccessAction = action$ =>\n  action$.pipe(\n    filter(action => action.type === \"ADD_MOVEMENT_SUCCESS\"),\n    mergeMap(async action => {\n      try {\n        const data = await fetchBalance();\n        return { type: \"GET_BALANCE_SUCCESS\", payload: data.balance };\n      } catch (error) {\n        console.error(error);\n      }\n    })\n  );\n\nexport default observableMiddleware => {\n  observableMiddleware.run(fetchAccountAction);\n  observableMiddleware.run(addMovementAction);\n  observableMiddleware.run(addMovementSuccessAction);\n};\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport reducers from \"./reducers\";\n\nimport Page from \"./containers/Page\";\nimport runActions from \"./actions\";\nimport { createEpicMiddleware } from \"redux-observable\";\n\nconst observableMiddleware = createEpicMiddleware();\n\nconst store = createStore(reducers, applyMiddleware(observableMiddleware));\n\nrunActions(observableMiddleware);\n\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Page></Page>\n        </header>\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}